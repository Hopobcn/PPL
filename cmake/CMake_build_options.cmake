# Set a default build type for single-configuration
if (NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif (NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)

######### PPL DEPENDENCES #########

# Find the QtCore library
find_package(Qt5 COMPONENTS Core Gui REQUIRED QUIET)
if (Qt5_FOUND)
    message(STATUS "--------------")
    message(STATUS "Qt5Core FOUND:")
    message(STATUS "Qt5Core_VERSION                   ${Qt5Core_VERSION}")
    message(STATUS "Qt5Core_INCLUDE_DIRS              ${Qt5Core_INCLUDE_DIRS}")
    message(STATUS "Qt5Core_LIBRARIES                 ${Qt5Core_LIBRARIES}")
    message(STATUS "Qt5Core_DEFINITIONS               ${Qt5Core_DEFINITIONS}")
    message(STATUS "Qt5Core_EXECUTABLE_COMPILE_FLAGS  ${Qt5Core_EXECUTABLE_COMPILE_FLAGS}")
    message(STATUS "--------------")
    message(STATUS "Qt5Gui FOUND:")
    message(STATUS "Qt5Gui_VERSION                   ${Qt5Gui_VERSION}")
    message(STATUS "Qt5Gui_INCLUDE_DIRS              ${Qt5Gui_INCLUDE_DIRS}")
    message(STATUS "Qt5Gui_LIBRARIES                 ${Qt5Gui_LIBRARIES}")
    message(STATUS "Qt5Gui_DEFINITIONS               ${Qt5Gui_DEFINITIONS}")
    message(STATUS "Qt5Gui_EXECUTABLE_COMPILE_FLAGS  ${Qt5Gui_EXECUTABLE_COMPILE_FLAGS}")
    message(STATUS "--------------")

    if (CMAKE_VERSION VERSION_LESS "2.8.12")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Core_EXECUTABLE_COMPILE_FLAGS} ${Qt5Gui_EXECUTABLE_COMPILE_FLAGS}")
    endif (CMAKE_VERSION VERSION_LESS "2.8.12")

    # Put autogenerated files in 'moc' folder
    set(AUTOGEN_TARGETS_FOLDER "${PROJECT_BINARY_DIR}/moc")

    # Find includes in corresponding build directories
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
    # Instruct CMake to run moc && uic && rcc automatically when needed.
    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTOUIC OFF)
    set(CMAKE_AUTORCC OFF)

else (Qt5_FOUND)
    message(FATAL_ERROR "Qt5 NOT FOUND")
endif (Qt5_FOUND)

find_package(GLEW REQUIRED QUIET)
if (GLEW_FOUND)
    message(STATUS "--------------")
    message(STATUS "GLEW FOUND:")
    message(STATUS "GLEW_INCLUDE_DIRS ${GLEW_INCLUDE_DIRS}")
    message(STATUS "GLEW_LIBRARIES    ${GLEW_LIBRARIES}")
    message(STATUS "--------------")
else (GLEW_FOUND)
    message(FATAL_ERROR "GLEW NOT FOUND")
endif (GLEW_FOUND)

if (UNIT_TESTS)
    find_package(Threads REQUIRED)
    find_package(GMock REQUIRED)
    if (GMOCK_FOUND)
        message(STATUS "Google Mocking Framework FOUND")
        message(STATUS "GMOCK_INCLUDE_DIR    ${GMOCK_INCLUDE_DIR}")
        message(STATUS "GMOCK_LIBRARY_PATH   ${GMOCK_LIBRARY_PATH}")
        message(STATUS "GMOCK_LIBRARY        ${GMOCK_LIBRARY}")

        message(STATUS "Google Testing Framework FOUND")
        message(STATUS "GTEST_INCLUDE_DIR    ${GTEST_INCLUDE_DIR}")
        message(STATUS "GTEST_LIBRARY_PATH   ${GTEST_LIBRARY_PATH}")
        message(STATUS "GTEST_LIBRARY        ${GTEST_LIBRARY}")
        message(STATUS "GTEST_MAIN_IBRARY    ${GTEST_MAIN_LIBRARY}")
        message(STATUS "GTEST_BOTH_LIBRARIES ${GTEST_BOTH_LIBRARIES}")
    else (GMOCK_FOUND)
        message(FATAL_ERROR "Google Mocking Framework NOT FOUND")
    endif (GMOCK_FOUND)

    enable_testing()
endif (UNIT_TESTS)

if (COVERAGE_TESTS)
    include(Coveralls)
    coveralls_turn_on_coverage()
endif ()

#########
######### PPL CONFIGURATION #########
#########
include_directories(${CMAKE_SOURCE_DIR}/include)

add_definitions("-DXPLM200")
add_definitions("-DXPLM210")

if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    add_definitions("-DAPL=0")
    add_definitions("-DIBM=1")
    add_definitions("-DLIN=0")

    if (WITHFREETYPE)
        add_definitions("-DFREETYPE2_STATIC")
    endif(WITHFREETYPE)

    if (WITHSERIALIZATION)
        find_package(Boost REQUIRED)
    endif (WITHSERIALIZATION)

elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    add_definitions("-DAPL=1")
    add_definitions("-DIBM=0")
    add_definitions("-DLIN=0")
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    add_definitions("-DAPL=0")
    add_definitions("-DIBM=0")
    add_definitions("-DLIN=1")
else ()
    message(FATAL_ERROR "PLATFORM ${CMAKE_SYSTEM_NAME} NOT SUPPORTED")
endif ()

if (STANDALONE)
    add_definitions("-DBUILD_FOR_STANDALONE")
endif (STANDALONE)

### IMPROVE THIS:
add_definitions("-DPRIVATENAMESPACE=TEST")
include_directories(${CMAKE_SOURCE_DIR}/include/simpleini)

if (("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang") OR
    ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU"))

    set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -std=c++11 -Wall -Wextra -pedantic -Wno-c++11-narrowing -fno-stack-protector")

    set(CMAKE_CXX_FLAGS_DEBUG          "${COMMON_CXX_FLAGS} ${CMAKE_CXX_FLAGS} -O0 -g")
    set(CMAKE_CXX_FLAGS_RELEASE        "${COMMON_CXX_FLAGS} ${CMAKE_CXX_FLAGS} -DNDEBUG -O3 -march=native")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${COMMON_CXX_FLAGS} ${CMAKE_CXX_FLAGS} -DNDEBUG -O3 -march=native -g")

elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -std=c++11 -Wall -Wextra -Werror -pedantic")

    set(CMAKE_CXX_FLAGS_DEBUG          "${COMMON_CXX_FLAGS} ${CMAKE_CXX_FLAGS} -O0 -g")
    set(CMAKE_CXX_FLAGS_RELEASE        "${COMMON_CXX_FLAGS} ${CMAKE_CXX_FLAGS} -DNDEBUG -O3 -march=native")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${COMMON_CXX_FLAGS} ${CMAKE_CXX_FLAGS} -DNDEBUG -O3 -march=native -g")

endif ()
